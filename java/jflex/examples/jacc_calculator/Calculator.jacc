%semantic Expr
%token '+' '*' '(' ')' ';' INTEGER
%left  '+'
%left  '*'

%%

prog : prog ';' expr    { System.out.println($3.eval()); }
     | expr             { System.out.println($1.eval()); }
     ;
expr : expr '+' expr	{ $$ = new AddExpr($1, $3); }
     | expr '*' expr	{ $$ = new MulExpr($1, $3); }
     | '(' expr ')'     { $$ = $2; }
     | INTEGER          { $$ = $1; }
     ;

%%
  private CalculatorLexer lexer;

  CalculatorParser(CalculatorLexer lexer) { this.lexer = lexer; }
